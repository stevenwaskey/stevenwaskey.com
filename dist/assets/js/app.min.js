!function(){"use strict";angular.module("Atlas",["core","utilities","shared","components"]).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";function e(e,t,n,r,o,i){i.setPrefix("Atlas_").setStorageCookie(30,"/").setStorageCookieDomain("stevenwaskey.com"),n.loginUrl="/api/authenticate",t.otherwise("/"),e.state("home",{url:"/",templateUrl:"/partials/components/single/single.html",controller:"PageController",controllerAs:"vm"}),r.html5Mode(!0)}angular.module("Atlas").config(["$stateProvider","$urlRouterProvider","$authProvider","$locationProvider","$animateProvider","localStorageServiceProvider",e])}(),function(){"use strict";var e=["ui.bootstrap","ui.router","satellizer","ngSanitize","ngAnimate","angulartics","angulartics.google.analytics","LocalStorageModule","angular-velocity","fullPage.js","angular-parallax","vAccordion"];angular.module("core",e).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";var e=["global","single"];angular.module("components",e).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";var e=["imgFadeIn","imgWithHover","instafeed"];angular.module("shared",e).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";var e=["PreLoader","validation","logging","notification"];angular.module("utilities",e).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";var e=["offCanvasNavigation"];angular.module("global",e).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";function e(e,t,n,r,o,i){var s=this;s.fp_options={anchors:["home","about","work"],scrollingSpeed:2e3,scrollOverflow:!0},s.visit=function(e){window.open(e)},s.cards=[{title:"Maxed Out Marine",name:"maxed",img_src:"bg.work.maxed.primary.jpg",tech:"Angular JS, BS3, Laravel, MySQL",descrip:"Full Design, UI, UX | Custom back-end for vehicle lead tracking",url:"http://maxedoutmarine.com",notes:"Client brought us his vision & his goals.  We had creative freedom.",external:[]},{title:"Tikiz Shaved Ice & Ice Cream Franchising",name:"tikiz",img_src:"bg.work.tikiz.primary.jpg",tech:"WordPress, PHP, MySQL",descrip:"Design elements | Hosting | Maintenance | Currently under redesign",url:"http://tikiz.com",notes:"Client had basic site built by internal staff.  We took over design & development tasks when their needs outgrew their skillset.",external:[]},{title:"The Give N Go Project",name:"givengo",img_src:"bg.work.givengo.primary.jpg",tech:"jQuery, HTML",descrip:"Design elements | Site development",url:"http://thegivengoproject.org",notes:"Awesome organization. We worked with their designer to effectively & visually communicate their brand.",external:[]},{title:"My Dental Fix RX",name:"mydfx",img_src:"bg.work.mydfx.primary.jpg",tech:"jQuery, BS3, PHP, MySQL",descrip:"Full Design, UI, UX | Custom back-end for franchisee resource management",url:"http://mydentalfixrx.com",notes:"Online resource for franchisees to access corporate docs, marketing resources, training materials & buy/sell/trade used equipment.",external:[]},{title:"Atlas Outcomes Tracking",name:"atlascap",img_src:"bg.work.atlascap.primary.jpg",tech:"jQuery, BS3, NodeJS, Websockets, PHP, MySQL, New Relic, CDN",descrip:"Full Design, UI, UX | Custom CRM | Outcomes Tracking | Analytics & Compliance Reporting | Scheduleing & Appointments",url:"https://atlasresults.us",notes:"My largest project to date.  Designed to track service outcomes rendered to poverty-stricken families with a comprehensive suite of tools to facilitate the organization's service-delivery model.",external:[]},{title:"Atlas Results",name:"atlas",img_src:"bg.work.atlas.primary.jpg",tech:"Angular JS, BS4, NodeJs, CDN",descrip:"Full Design, UI, UX | Site developent",url:"https://atlasresults.com",notes:"My company site.  This is my playground :)",external:[]},{title:"Congressman Rich Nugent",name:"nugent",img_src:"bg.work.nugent.primary.jpg",tech:"HTML",descrip:"Full Design, UI, UX | Site development",url:"",notes:"Prior to being congressman, Rich Nugent was our local Sherriff for two terms.  We did the site design & development. Circa 1998 - takin it back to the old school.",external:[]},{title:"Textrooms",name:"textrooms",img_src:"bg.work.textrooms.primary.jpg",tech:"jQuery, PHP, MySQL, Twilio",descrip:"Design elements | Site development | API design & development",url:"",notes:"A Gainsville based start-up that created a chat-room styled text-messaging service.  I did all the back-end architecture & development.",external:[]},{title:"Hawk's Eye Home Inspections",name:"hawkseye",img_src:"bg.work.hawkseye.primary.jpg",tech:"Angular JS, BS3, Laravel, MySQL, New Relic, PECL Stats",descrip:"Full design, UI, UX | Custom backend for home inspection tracking | Quantitative analysis on home inspection data",url:"https://hawkseyellc.com",notes:"Client runs a large home inspection services agency.  We developed their site, and built a scoring model to quantitate the outcomes of inspections, providing significant additional detail for homeowners insurance underwriting.",external:[]},{title:"Speedy Shot Timer",name:"speedy",img_src:"bg.work.speedy.primary.jpg",tech:"PhoneGap, NodeJS",descrip:"Full design, UI, UX | App development",url:"",notes:"This was a really fun project to [practice] build an app that timed the delay between shots when in competitive speed shooting matches.  Uses the devices microphone to detect the sound of gun shots.",external:[]},{title:"Spestle",name:"spestle",img_src:"bg.work.spestle.primary.jpg",tech:"jQuery, PHP, MySQL",descrip:"Design elements | Site development | Webservice design & development",url:"https://techcrunch.com/2012/09/12/spestle-is-cafepress-for-seasoning-blends-seriously/",notes:"If you're a foodie, this is your utopia.  A slick drag & drop tool to empower chefs to create their own custom blends, package & brand them, then sell them.  Went to TechCrunch with this one.  What a blast.",external:[{label:"TechCrunch",url:"https://techcrunch.com/2012/09/12/spestle-is-cafepress-for-seasoning-blends-seriously/"}]},{title:"South Florida Bounce",name:"sfb",img_src:"bg.work.sfb.primary.jpg",tech:"WordPress, FreshDesk",descrip:"Design elements | Hosting | Performance enhancements | Leads tracking",url:"https://southfloridabounce.com",notes:"Took over design & development.  Client was in need of developer with greater bandwith to complete their frequent updates.",external:[]},{title:"Go Combine Athletics",name:"combine",img_src:"bg.work.combine.primary.jpg",tech:"jQuery, PHP",descrip:"Site development",url:"http://go-combine.com/",notes:"Built a single page site for a collegue graphic designer.  Horizontal scrolling.  Integrates with their scheduling platform.",external:[]},{title:"Dominion Surf",name:"dominion",img_src:"bg.work.dominion.primary.jpg",tech:"Flash MX, jQuery, PHP",descrip:"Full design, UI, UX | Site development",url:"",notes:"Pretty old project, but one of my favorites.  Clients were super cool.  All flash designed site for custom surfboard builders in New Smyrna Beach, FL.",external:[]},{title:"GI-Tax",name:"gitax",img_src:"bg.work.gitax.primary.jpg",tech:"Photoshop, Illustrator",descrip:"Logo design | Site design planning",url:"http://gitax.com/",notes:"Worked with the client to visually achieve their brand's feeling & message.  DesignZillas in Orlando built site.  Great experience!",external:[]},{title:"Old McMicky's Farm",name:"ommf",img_src:"bg.work.ommf.primary.jpg",tech:"WordPress, jQuery, BS3, Laravel, MySQL",descrip:"Site hardening | HA Hosting | Currently under redesign | Custom back-end for 'Mission I Do' Analytics",url:"https://oldmcmickys.com",notes:"Client was introduced to us to help analyze a voting result dataset from a $30,000 wedding giveaway.  We subsequently took over management of their site & are currently designing a new site."}]}angular.module("single",[]).constant("MODULE_VERSION","0.0.1").controller("PageController",["$scope","$state","$http","$q","PreLoader","notificationService",e])}(),function(){"use strict";function e(e){function t(t,n,r){n.addClass("img-fade ng-hide-remove"),e(n.on("load",function(){n.addClass("ng-hide-add")}))}return{restrict:"A",link:t}}angular.module("imgFadeIn",[]).constant("MODULE_VERSION","0.0.1").directive("imgFadeIn",["$timeout",e])}(),function(){"use strict";function e(e){var t=function(e,t){e.show_img=!0,t.find(".img_fg").addClass("ng-show")},n=function(e,t){e.show_img=!1};function r(r,o,i){r.img_bg=i.src,r.img_fg=i.src.replace(".off.",".on."),r.show_img=!1,o.on("mouseover",function(){e(t(r,o))}),o.on("mouseout",function(){e(n(r,o))})}return{restrict:"E",template:"<div class='img-with-hover' ><img src='{{img_bg}}' class='img-hover img-bg' /><img src='{{img_fg}}' ng-show='show_img' class='img-hover img-fg' /></div>",link:r}}angular.module("imgWithHover",[]).constant("MODULE_VERSION","0.0.1").directive("imgWithHover",["$timeout",e])}(),function(){"use strict";function e(e,t){var n,r={};this.get=function(e){return r===!1?!1:"object"!=typeof r?!1:"string"!=typeof e?r:r.hasOwnProperty(e)?r[e]:"ERR"};var o=function(e){var t,n,o;if("object"!=typeof e)return r=!1,!1;r={images:[]};for(n in e)if("object"==typeof e[n]&&e[n].hasOwnProperty("data")&&"object"==typeof e[n].data)for(t in e[n].data)e[n].data[t].hasOwnProperty("images")&&(r.images.push(e[n].data[t].images),o=!0);return o===!0};this.fetch=function(){var t,r,i=e.defer(),s=[];return n=new Instafeed({get:"user",userId:"3421829353",accessToken:"3421829353.1677ed0.d4c692d961ba4866aea147fcfa1fc02c",mock:!0,sortBy:"random",success:function(e){s.push(e),t=0;for(r in s)t+=parseInt(s[r].data.length);t>40?o(s)?i.resolve():i.reject():(n.next(),n.run())}}),n.run(),i.promise}}function t(e){function t(t,n,r){var o=this;o.imgs=null,o.img_size="low_resolution",o.build=function(){o.imgs=e.get("images")},e.fetch().then(o.build)}return{scope:{},restrict:"E",controller:["$scope","$element","$attrs",t],controllerAs:"grid",template:"<section class='instagram-grid row'><div class='grid-item' ng-repeat='img in grid.imgs'><img ng-src='{{img[grid.img_size].url}}' /></div></section>"}}angular.module("instafeed",[]).constant("MODULE_VERSION","0.0.1").service("InstagramService",["$q","$http",e]).directive("instagramGrid",["InstagramService",t])}(),function(){"use strict";function e(){var e=function(e,t,n){t=isNaN(t)?0:t,n="undefined"!=typeof n&&null!==n?n:"";var r=new Intl.NumberFormat("en-US",{style:"currency",currency:"USD",minimumFractionDigits:t});return n+r.format(e)},t=function(e){return(e+"").toLowerCase().replace(/^([a-z\u00E0-\u00FC])|\s+([a-z\u00E0-\u00FC])/g,function(e){return e.toUpperCase()})},n=function(e){e+="";var t=e.charAt(0).toUpperCase();return t+e.substr(1)},r=function(e,t){e+="";var n=e.substr(0,t);return n.substr(0,Math.min(n.length,n.lastIndexOf(" ")))},o=function(t){var n=t>1e6,r=n?"Mb":"Kb";return t=n?(t/1024/1024).toFixed(2):(t/1024).toFixed(2),e(t,2).substr(1)+r},i=function(e){if(null!==e)switch(e=String(parseInt(e)),e.length){case 11:return e.substring(0,1)+" ("+e.substring(1,4)+") "+e.substring(4,7)+"-"+e.substring(7,11);case 10:return"("+e.substring(0,3)+") "+e.substring(3,6)+"-"+e.substring(6,10);case 7:return e.substring(0,3)+"-"+e.substring(3,7);default:return e}};return{currency:e,ucfirst:n,ucwords:t,wordwrap:r,filesize:o,phone:i}}angular.module("formatter",[]).constant("MODULE_VERSION","0.0.1").service("Formatter",[e])}(),function(){"use strict";function e(){return{print:StackTrace.fromError}}function t(){return{$get:function(e){return e}}}function n(e,t,n){var r=!1,o={};function i(e){o.stackTrace=e,r&&$.ajax({type:"POST",url:"/logger",contentType:"application/json",data:angular.toJson(o)})}function s(r,s){e.error.apply(e,arguments);try{o.url=t.location.href,o.type="exception",o.cause=s||"",o.message=r.toString(),n.print(r).then(i)["catch"](function(){console.log("Caught Exception:  ",arguments)})}catch(a){e.warn("Error server-side logging failed"),e.log(a)}}return s}function r(e,t){return{error:function(n){e.error.apply(e,arguments),$.ajax({type:"POST",url:"/logger",contentType:"application/json",data:angular.toJson({url:t.location.href,message:n,type:"error"})})},debug:function(n){e.log.apply(e,arguments),$.ajax({type:"POST",url:"/clientlogger",contentType:"application/json",data:angular.toJson({url:t.location.href,message:n,type:"debug"})})}}}angular.module("logging",[]).constant("MODULE_VERSION","0.0.1").factory("traceService",[e]).provider("$exceptionHandler",[t]).factory("exceptionLoggingService",["$log","$window","traceService",n]).factory("applicationLoggingService",["$log","$window",r])}(),function(){"use strict";function e(){var e={},t=[],n=function(t,n){n="object"==typeof n?n:{},e[t]={on:n.hasOwnProperty("on")?n.on:function(){},off:n.hasOwnProperty("off")?n.off:function(){},set:n.hasOwnProperty("set")?n.set:function(){},flash:n.hasOwnProperty("flash")?n.flash:function(){}}},r=function(e){},o=function(){var n,r,o,i;n=arguments[0]||{},o=n.hasOwnProperty("message")?n.message:!1,r=n.hasOwnProperty("status")?n.status:null,i=n.hasOwnProperty("element")?n.element:null,i=i?i:"*";var s={status:r,msg:o,elem:i};t.push(s),e.hasOwnProperty(i)&&e[i].flash(o,r,3e3)};return{register:n,unregister:r,alert:o}}function t(e,t){function n(n,r,o){n.status=null,n.msg=null,n.collapse=!0;var i=function(){n.collapse=!1},s=function(){n.collapse=!0},a=function(e,t){n.msg=e,n.status=t,n.classes=["alert"],n.status?n.classes.push("alert-success"):n.status===!1&&n.classes.push("alert-danger"),n.classes=n.classes.join(" ")},l=function(e,n,r){a(e,n),i(),r=r?r:1e3,t(s,r)},c={on:i,off:s,set:a,flash:l};e.register(o.name,c)}function r(t,n,r){t.$on("$destroy",function(){e.unregister(r.name)})}return{restrict:"A",scope:{name:"@","class":"@"},template:"<div uib-collapse='collapse' class='collapse {{class}}' ng-class='classes'><span class='msg-success' ng-if='status === true'><strong>Success:</strong>&nbsp;&nbsp;</span><span class='msg-error' ng-if='status === false'><strong>Error:</strong>&nbsp;&nbsp;</span><span ng-bind='msg' ng-class='{ \"msg-success\": status === true, \"msg-error\": status === false }'></span></div>",link:n,controller:["$scope","$element","$attrs",r]}}angular.module("notification",[]).constant("MODULE_VERSION","0.0.1").directive("notificationElement",["notificationService","$timeout",t]).service("notificationService",[e])}(),function(){"use strict";function e(e,t){function n(t){this.imageLocations=t,this.imageCount=this.imageLocations.length,this.loadCount=0,this.errorCount=0,this.states={PENDING:1,LOADING:2,RESOLVED:3,REJECTED:4},this.state=this.states.PENDING,this.deferred=e.defer(),this.promise=this.deferred.promise}return n.preloadImages=function(e){var t=new n(e);return t.load()},n.prototype={constructor:n,isInitiated:function(){return this.state!==this.states.PENDING},isRejected:function(){return this.state===this.states.REJECTED},isResolved:function(){return this.state===this.states.RESOLVED},load:function(){if(this.isInitiated())return this.promise;this.state=this.states.LOADING;for(var e=0;e<this.imageCount;e++)this.loadImageLocation(this.imageLocations[e]);return this.promise},handleImageError:function(e){this.errorCount++,this.isRejected()||(this.state=this.states.REJECTED,this.deferred.reject(e))},handleImageLoad:function(e){this.loadCount++,this.isRejected()||(this.deferred.notify({percent:Math.ceil(this.loadCount/this.imageCount*100),imageLocation:e}),this.loadCount===this.imageCount&&(this.state=this.states.RESOLVED,this.deferred.resolve(this.imageLocations)))},loadImageLocation:function(e){var n=this,r=$(new Image).load(function(e){t.$apply(function(){n.handleImageLoad(e.target.src),n=r=e=null})}).error(function(e){t.$apply(function(){n.handleImageError(e.target.src),n=r=e=null})}).prop("src",e)}},n}angular.module("PreLoader",[]).constant("MODULE_VERSION","0.0.1").factory("PreLoader",["$q","$rootScope",e])}(),function(){"use strict";var e=["formFieldValidation","formValidation"];angular.module("validation",e).constant("MODULE_VERSION","0.0.1")}(),function(){"use strict";function e(e,t,n,r,o,i){return function(s){if(+!!s.template+ +!!s.templateUrl!==1)throw new Error;var a,l=angular.element(s.container||document.body),c=s.containerClass||"is-off-canvas-opened",u=s.controller||angular.noop,g=s.controllerAs,d=null;if(s.template){var m=i.defer();m.resolve(s.template),a=m.promise}else a=r.get(s.templateUrl,{cache:o}).then(function(e){return e.data});a.then(function(r){var o=t.$new(),i=n(u,{$scope:o});g&&(o[g]=i),d=angular.element(r),l.prepend(d),e(d)(o)});function f(){this.isOpened=!this.isOpened,l.toggleClass(c)}return{toggle:f,isOpened:!1}}}angular.module("cn.offCanvas",[]).constant("MODULE_VERSION","0.0.1").factory("cnOffCanvas",["$compile","$rootScope","$controller","$http","$templateCache","$q",e]);function t(){function e(e,t){e.toggle=function(){t.toggle()}}return{restrict:"A",controller:["$scope","offCanvas",e]}}function n(e,t,n,r){var o=this;o.toggle=e.toggle,o.go=function(n){e.toggle(),t.go(n)}}function r(e){return e({controller:["offCanvas","$state","$location","$anchorScroll",n],controllerAs:"nav",templateUrl:"/partials/components/global/offCanvasNavigation/offCanvasNavigation.html"})}angular.module("offCanvasNavigation",["cn.offCanvas"]).constant("MODULE_VERSION","0.0.1").factory("offCanvas",["cnOffCanvas",r]).directive("offCanvasToggle",["cnOffCanvas",t])}(),function(){"use strict";function e(e){function t(e,t,n,r){e.$on("validate-form",function(t,o){o.hasOwnProperty("name")&&o.name!==n.name||(e.$broadcast("validate-form-field"),o.hasOwnProperty("callback")&&o.callback(r))})}return{restrict:"A",require:"^form",link:t}}angular.module("formValidation",["formFieldValidation"]).constant("MODULE_VERSION","0.0.1").directive("formValidation",["$timeout",e])}(),function(){"use strict";var e={integer:"^\\d$",name:"^[a-zA-Z]+(([\\'\\,\\.\\- ][a-zA-Z ])?[a-zA-Z]*)*$",email:"^[0-9a-zA-Z]+([0-9a-zA-Z]*[-._+])*[0-9a-zA-Z]+@[0-9a-zA-Z]+([-.][0-9a-zA-Z]+)*([0-9a-zA-Z]*[.])[a-zA-Z]{2,6}$",phone:"^1?[-\\. ]?(\\(\\d{3} \\)?[-\\. ]?|\\d{3}?[-\\. ]?)?\\d{3}?[-\\. ]?\\d{4}$"};function t(){function e(e,t,n,r){e.$on("validate-form-field",function(){var e,t;if((!n.hasOwnProperty("required")||(e=null===r.$modelValue||"undefined"==typeof r.$modelValue||0===String(r.$modelValue).length,r.$setValidity("required",!e),r.$setTouched(),!e))&&(n.hasOwnProperty("pattern")&&null!==r.$modelValue&&"undefined"!=typeof r.$modelValue?(t=new RegExp(n.pattern),e=!t.test(r.$modelValue),r.$setValidity("pattern",!e),r.$setTouched()):r.$setTouched(),n.hasOwnProperty("formFieldValidation")))switch(n.formFieldValidation.toLowerCase()){case"date_obj":r.$setValidity("pattern",n.hasOwnProperty("required")?r.$modelValue instanceof Date:"undefined"==typeof r.$modelValue||r.$modelValue instanceof Date),r.$setTouched()}})}return{require:"ngModel",link:["scope","elem","attrs","ctrl",e]}}angular.module("formFieldValidation",[]).constant("MODULE_VERSION","0.0.1").value("validationRules",e).directive("formFieldValidation",["$timeout",t])}();
//# sourceMappingURL=data:application/json;base64,
